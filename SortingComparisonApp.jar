import java.io.*;
import java.util.*;

public class SortingComparisonApp {
    
    // Generate an array of random integers between 0 and 100
    public static int[] createRandomArray(int arrayLength) {
        Random rand = new Random();
        int[] array = new int[arrayLength];
        for (int i = 0; i < arrayLength; i++) {
            array[i] = rand.nextInt(101); // Random integer between 0 and 100
        }
        return array;
    }
    
    // Write array to file
    public static void writeArrayToFile(int[] array, String filename) {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(filename))) {
            for (int num : array) {
                writer.write(num + "\n");
            }
        } catch (IOException e) {
            System.out.println("Error writing to file: " + e.getMessage());
        }
    }
    
    // Read array from file
    public static int[] readFileToArray(String filename) {
        List<Integer> list = new ArrayList<>();
        try (BufferedReader reader = new BufferedReader(new FileReader(filename))) {
            String line;
            while ((line = reader.readLine()) != null) {
                list.add(Integer.parseInt(line));
            }
        } catch (IOException e) {
            System.out.println("Error reading from file: " + e.getMessage());
        }
        return list.stream().mapToInt(i -> i).toArray();
    }
    
    // Implement Bubble Sort
    public static void bubbleSort(int[] array) {
        int n = array.length;
        boolean swapped;
        for (int i = 0; i < n - 1; i++) {
            swapped = false;
            for (int j = 0; j < n - 1 - i; j++) {
                if (array[j] > array[j + 1]) {
                    int temp = array[j];
                    array[j] = array[j + 1];
                    array[j + 1] = temp;
                    swapped = true;
                }
            }
            if (!swapped) break; // Optimization: stop if already sorted
        }
    }
    
    // Implement Merge Sort
    public static void mergeSort(int[] array) {
        if (array.length < 2) return;
        int mid = array.length / 2;
        int[] left = Arrays.copyOfRange(array, 0, mid);
        int[] right = Arrays.copyOfRange(array, mid, array.length);
        
        mergeSort(left);
        mergeSort(right);
        merge(array, left, right);
    }
    
    private static void merge(int[] array, int[] left, int[] right) {
        int i = 0, j = 0, k = 0;
        while (i < left.length && j < right.length) {
            if (left[i] <= right[j]) {
                array[k++] = left[i++];
            } else {
                array[k++] = right[j++];
            }
        }
        while (i < left.length) array[k++] = left[i++];
        while (j < right.length) array[k++] = right[j++];
    }
    
    // Main function to handle user input and compare sorting times
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the length of the array: ");
        int length = scanner.nextInt();
        
        int[] array = createRandomArray(length);
        System.out.println("Generated Array: " + Arrays.toString(array));
        
        int[] bubbleArray = Arrays.copyOf(array, array.length);
        int[] mergeArray = Arrays.copyOf(array, array.length);
        
        long startBubble = System.nanoTime();
        bubbleSort(bubbleArray);
        long endBubble = System.nanoTime();
        System.out.println("Bubble Sort Time: " + (endBubble - startBubble) + " ns");
        
        long startMerge = System.nanoTime();
        mergeSort(mergeArray);
        long endMerge = System.nanoTime();
        System.out.println("Merge Sort Time: " + (endMerge - startMerge) + " ns");
        
        String filename = "array_data.txt";
        writeArrayToFile(array, filename);
        System.out.println("Array saved to " + filename);
        
        writeArrayToFile(bubbleArray, "sorted_bubble_" + filename);
        System.out.println("Bubble sorted array saved to sorted_bubble_" + filename);
        
        writeArrayToFile(mergeArray, "sorted_merge_" + filename);
        System.out.println("Merge sorted array saved to sorted_merge_" + filename);
        
        scanner.close();
    }
}
